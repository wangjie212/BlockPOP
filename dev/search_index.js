var documenterSearchIndex = {"docs":
[{"location":"#TSSOS","page":"Home","title":"TSSOS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TSSOS is a sparse polynomial optimization package based on the sparsity adapted moment-SOS hierarchies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Jie Wang,  LAAS-CNRS.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TSSOS is simply installed by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/wangjie212/TSSOS","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DynamicPolynomials: Polynomial definition\nMultivariatePolynomials: Polynomials manipulations\nNCTSSOS: Noncommutative polynomial optimization\nChordalGraph: Chordal graphs and chordal extentions\nSparseJSR: Computing joint spetral radius","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TSSOS: A Moment-SOS hierarchy that exploits term sparsity, Jie Wang, Victor Magron and Jean B. Lasserre, 2020.\nChordal-TSSOS: a moment-SOS hierarchy that exploits term sparsity with chordal extension, Jie Wang, Victor Magron and Jean B. Lasserre, 2020.\nCS-TSSOS: Correlative and term sparsity for large-scale polynomial optimization, Jie Wang, Victor Magron, Jean B. Lasserre and Ngoc H. A. Mai, 2020.","category":"page"},{"location":"spop/#Sparse-polynomial-optimization","page":"Sparse Polynomial Optimization","title":"Sparse polynomial optimization","text":"","category":"section"},{"location":"spop/","page":"Sparse Polynomial Optimization","title":"Sparse Polynomial Optimization","text":"tssos_first\r\ntssos_higher!\r\ncs_tssos_first\r\ncs_tssos_higher!\r\nrefine_sol","category":"page"},{"location":"spop/#TSSOS.tssos_first","page":"Sparse Polynomial Optimization","title":"TSSOS.tssos_first","text":"opt,sol,data = tssos_first(f, x; nb=0, newton=true, reducebasis=false, TS=\"block\", merge=false,\nsolver=\"Mosek\", QUIET=false, solve=true, MomentOne=false, solution=false, tol=1e-4)\n\nCompute the first step of the TSSOS hierarchy for unconstrained polynomial optimization. If newton=true, then compute a monomial basis by the Newton polytope method. If reducebasis=true, then remove monomials from the monomial basis by diagonal inconsistency. If TS=\"block\", use maximal chordal extensions; if TS=\"MD\", use approximately smallest chordal extensions. If merge=true, perform the PSD block merging. If MomentOne=true, add an extra first order moment matrix to the moment relaxation. Return the optimum, the (near) optimal solution (if solution=true) and other data.\n\nArguments\n\nf: the objective function for unconstrained polynomial optimization.\nx: the set of variables.\nnb: the number of binary variables in x.\ntol: the relative tolerance to certify global optimality.\n\n\n\n\n\nopt,sol,data = tssos_first(pop, x, d; nb=0, numeq=0, quotient=true, basis=nothing,\nreducebasis=false, TS=\"block\", merge=false, solver=\"Mosek\", QUIET=false, solve=true,\nMomentOne=false, solution=false, tol=1e-4)\n\nCompute the first step of the TSSOS hierarchy for constrained polynomial optimization with relaxation order d. If quotient=true, then exploit the quotient ring structure defined by the equality constraints. Return the optimum, the (near) optimal solution (if solution=true) and other data.\n\nArguments\n\npop: the vector of the objective function, inequality constraints, and equality constraints.\nx: the set of variables.\nd: the relaxation order of the moment-SOS hierarchy.\nnb: the number of binary variables in x.\nnumeq: the number of equality constraints.\n\n\n\n\n\n","category":"function"},{"location":"spop/#TSSOS.tssos_higher!","page":"Sparse Polynomial Optimization","title":"TSSOS.tssos_higher!","text":"opt,sol,data = tssos_higher!(data; TS=\"block\", merge=false, QUIET=false, solve=true,\nMomentOne=false, solution=false, tol=1e-4)\n\nCompute higher steps of the TSSOS hierarchy. Return the optimum, the (near) optimal solution (if solution=true) and other data.\n\n\n\n\n\n","category":"function"},{"location":"spop/#TSSOS.cs_tssos_first","page":"Sparse Polynomial Optimization","title":"TSSOS.cs_tssos_first","text":"opt,sol,data = cs_tssos_first(pop, x, d; nb=0, numeq=0, foc=100, CS=\"MF\", minimize=false,\nassign=\"first\", TS=\"block\", solver=\"Mosek\", QUIET=false, solve=true, solution=false,\nMomentOne=true, tol=1e-4)\n\nCompute the first step of the CS-TSSOS hierarchy for constrained polynomial optimization with relaxation order d.\n\nArguments\n\npop: the vector of the objective function, inequality constraints, and equality constraints.\nx: the set of variables.\nd: the relaxation order of the moment-SOS hierarchy.\nnb: the number of binary variables in x.\nnumeq: the number of equality constraints.\n\n\n\n\n\nopt,sol,data = cs_tssos_first(supp::Vector{Vector{Vector{UInt16}}}, coe::Vector{Vector{Float64}},\nn, d; numeq=0, nb=0, foc=100, CS=\"MF\", minimize=false, assign=\"first\", TS=\"block\", QUIET=false,\nsolver=\"Mosek\", solve=true, solution=false, MomentOne=true, tol=1e-4)\n\nCompute the first step of the CS-TSSOS hierarchy for constrained polynomial optimization with relaxation order d. Here the polynomial optimization problem is defined by supp and coe, corresponding to the supports and coeffients of pop respectively.\n\nArguments\n\nsupp: the supports of the polynomial optimization problem.\ncoe: the coeffients of the polynomial optimization problem.\nd: the relaxation order of the moment-SOS hierarchy.\nnumeq: the number of equality constraints.\n\n\n\n\n\nopt,sol,data = cs_tssos_first(supp::Vector{Vector{Vector{Vector{UInt16}}}}, coe::Vector{Vector{ComplexF64}},\nn, d, dg; numeq=0, foc=100, CS=\"MF\", minimize=false, assign=\"first\", TS=\"block\", QUIET=false, solve=true,\nMomentOne=true)\n\nCompute the first step of the CS-TSSOS hierarchy for constrained complex polynomial optimization with relaxation order d. Here the complex polynomial optimization problem is defined by supp and coe, corresponding to the supports and coeffients of pop respectively.\n\nArguments\n\nsupp: the supports of the complex polynomial optimization problem.\ncoe: the coeffients of the complex polynomial optimization problem.\nd: the relaxation order of the moment-SOHS hierarchy.\nnumeq: the number of equality constraints.\n\n\n\n\n\n","category":"function"},{"location":"spop/#TSSOS.cs_tssos_higher!","page":"Sparse Polynomial Optimization","title":"TSSOS.cs_tssos_higher!","text":"opt,sol,data = cs_tssos_higher!(data; TS=\"block\", QUIET=false, solve=true,\nsolution=false, MomentOne=false)\n\nCompute higher steps of the CS-TSSOS hierarchy. Return the optimum, the (near) optimal solution (if solution=true) and other data.\n\n\n\n\n\n","category":"function"},{"location":"spop/#TSSOS.refine_sol","page":"Sparse Polynomial Optimization","title":"TSSOS.refine_sol","text":"ref_sol,upper_bound,rel_gap = refine_sol(opt, sol, data, QUIET=false, tol=1e-4)\n\nRefine the obtained solution by a local solver. Return the refined solution, the upper bound given by the local solver and the relative optimality gap.\n\n\n\n\n\n","category":"function"}]
}
